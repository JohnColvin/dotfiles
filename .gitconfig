[hub]
  protocol = https

[core]
  excludesfile = ~/.gitignore
  editor = vim

[user]
  name = John Colvin
  email = colvin.john@gmail.com

[push]
  default = simple

[alias]
  a  = add
  aa = add .

  b   = branch
  bd  = branch -D
  bdm = "!git for-each-ref refs/heads/ '--format=%(refname:short)' | while read branch; do mergeBase=$(git merge-base master $branch) && [[ $(git cherry master $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == '-'* ]] && git branch -D $branch; done"

  c   = commit
  ca  = commit -a
  cam = commit -a -m
  cd  = commit --amend -C HEAD
  cda = commit --amend -C HEAD -a
  cm  = commit -m

  d  = diff
  d-  = "!f() { git diff HEAD~$1; }; f"
  dc = diff --cached
  dc-  = "!f() { git diff --cached HEAD~$1; }; f"
  dm = diff master

  e   = reset
  e-  = "!f() { git reset HEAD~$1; }; f"
  eh  = reset --hard
  eh- = "!f() { git reset --hard HEAD~$1; }; f"
  ehh = "!f() { git reset --hard HEAD~$1; }; f"

  f  = commit --fixup
  f- = "!f() { git commit --fixup HEAD~$1; }; f"
  fh = "!f() { git commit --fixup HEAD~$1; }; f"

  h = stash
  hp = stash pop
  hy = stash apply

  i  = bisect
  ib = bisect bad
  ig = bisect good
  ir = bisect reset
  is = bisect start

  k  = cherry-pick
  ka = cherry-pick --abort
  kc = cherry-pick --continue

  l = log --pretty=oneline --abbrev-commit

  m  = commit --amend -C HEAD
  ma = commit --amend -C HEAD -a

  o  = checkout
  oa  = checkout .
  ob = checkout -b
  om = checkout master

  p  = push -u origin HEAD
  pf = push --force-with-lease -u origin HEAD

  q   = rebase -i --autosquash
  q-  = "!f() { git rebase -i --autosquash HEAD~$1; }; f"
  qh  = "!f() { git rebase --autosquash HEAD~$1; }; f"
  qi- = "!f() { git rebase -i --autosquash HEAD~$1; }; f"
  qih = "!f() { git rebase -i --autosquash HEAD~$1; }; f"
  qm  = rebase -i --autosquash master
  qim = rebase -i --autosquash master

  r   = rebase
  ra  = rebase --abort
  rc  = rebase --continue
  rem = rebase master
  ri  = rebase -i
  ri- = "!f() { git rebase -i HEAD~$1; }; f"
  rih = "!f() { git rebase -i HEAD~$1; }; f"
  rim = rebase -i master
  rs  = rebase --skip

  s  = show
  s- = "!f() { git show HEAD~$1; }; f"
  sh = "!f() { git show HEAD~$1; }; f"

  u  = pull
  up = !git pull -r origin $(git symbolic-ref --short HEAD)
  ur = pull -r

  x = rm

  y = apply

[gitsh]
  prompt = %c%b%w
[gitsh "color"]
	default = green
  untracked = magenta
  modified = cyan
[color "status"]
	added = blue
	changed = cyan
	untracked = magenta
